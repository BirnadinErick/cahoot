/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: register.proto */

#ifndef PROTOBUF_C_register_2eproto__INCLUDED
#define PROTOBUF_C_register_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct RegisterRequest RegisterRequest;
typedef struct AnswerRequest AnswerRequest;


/* --- enums --- */


/* --- messages --- */

struct  RegisterRequest
{
  ProtobufCMessage base;
  char *username;
};
#define REGISTER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&register_request__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  AnswerRequest
{
  ProtobufCMessage base;
  uint32_t qu_id;
  uint32_t answer_idx;
};
#define ANSWER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&answer_request__descriptor) \
    , 0, 0 }


/* RegisterRequest methods */
void   register_request__init
                     (RegisterRequest         *message);
size_t register_request__get_packed_size
                     (const RegisterRequest   *message);
size_t register_request__pack
                     (const RegisterRequest   *message,
                      uint8_t             *out);
size_t register_request__pack_to_buffer
                     (const RegisterRequest   *message,
                      ProtobufCBuffer     *buffer);
RegisterRequest *
       register_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   register_request__free_unpacked
                     (RegisterRequest *message,
                      ProtobufCAllocator *allocator);
/* AnswerRequest methods */
void   answer_request__init
                     (AnswerRequest         *message);
size_t answer_request__get_packed_size
                     (const AnswerRequest   *message);
size_t answer_request__pack
                     (const AnswerRequest   *message,
                      uint8_t             *out);
size_t answer_request__pack_to_buffer
                     (const AnswerRequest   *message,
                      ProtobufCBuffer     *buffer);
AnswerRequest *
       answer_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   answer_request__free_unpacked
                     (AnswerRequest *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*RegisterRequest_Closure)
                 (const RegisterRequest *message,
                  void *closure_data);
typedef void (*AnswerRequest_Closure)
                 (const AnswerRequest *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor register_request__descriptor;
extern const ProtobufCMessageDescriptor answer_request__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_register_2eproto__INCLUDED */
